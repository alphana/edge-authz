server:
  port: 9090

spring:
  application:
    name: gateway-service

  cloud:
    gateway:
      routes:
        - id: resource-service
          uri: http://localhost:8080  # Replace with your resource service URL
          predicates:
            - Path=/api/1/resource/**
          filters:
            - StripPrefix=1
#            - RequestHashing=SHA-256
  #            - RoleBasedAuthorizationFilter=


  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://localhost:8080/auth/realms/beans/protocol/openid-connect/certs #http://localhost:8080/oauth2/jwks
#          issuer-uri: http://localhost:8080/auth/realms/beans

logging:
  level:
    org.springframework.security: trace
    org.keycloak: trace
    com.example: trace

#  pattern.console: "%d{yyyy-MM-dd HH:mm:ss} | %-5level | %logger{1.}:%L | %msg%n"
  pattern.console: "${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd'T'HH:mm:ss.SSSXXX}}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(){faint} %clr(${LOGGED_APPLICATION_NAME:-}[%15.15t]){faint} %clr(${LOG_CORRELATION_PATTERN:-}){faint}%clr(%-40.40logger{39}:%L){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"


apigateway:
  tenants:
    - name: tenant1
      security:
        tokenKey: t1 #plt_duid claim
        resourceserver:
          auth-server-url: "http://localhost:8080/auth/" # alternative to jwk-set-uri
          jwk-set-uri: http://localhost:8080/auth/realms/beans/protocol/openid-connect/certs # alternative to auth-server-url
          authz-client:
            realm: "beans" # auth-server-url required
            ssl-required: "external"
            verify-token-audience: true
            resource: "gw-edge-service-client"
            credentials:
              secret: "77nT9BRBlzJWd0GpwACyzQVrmmFdHNIv"




